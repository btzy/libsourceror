const Infinity = __infinity;
const NaN = __nan;
const undefined = __undefined;
function __display_1(v) {
    __ffi_display(stringify(v));
}
function __display_2(v, s) {
    __ffi_display(s + stringify(v));
}
function __error_1(v) {
    __ffi_error(stringify(v));
}
function __error_2(v, s) {
    __ffi_error(s + stringify(v));
}
function is_boolean(v) {
    return __is_boolean(v);
}
function is_number(v) {
    return __is_number(v);
}
function is_string(v) {
    return __is_string(v);
}
function is_undefined(v) {
    return __is_undefined(v);
}
function is_function(v) {
    return __is_function(v);
}
function parse_int(s, i) {
    return __parse_int(s, i);
}
function prompt(s) {
    return __ffi_prompt(s);
}
function runtime() {
    return __ffi_time();
}
function __stringify_number(v) {
    if (v === 0) {
        return "";
    } else {
        const d = v % 10;
        return __stringify_number(v / 10) +
            (
                d === 0 ? "0" :
                d === 1 ? "1" :
                d === 2 ? "2" :
                d === 3 ? "3" :
                d === 4 ? "4" :
                d === 5 ? "5" :
                d === 6 ? "6" :
                d === 7 ? "7" :
                d === 8 ? "8" :
                          "9"
            );
    }
}
function stringify(v) {
    if (is_boolean(v)) {
        return v === true ? "true" : "false";
    } else if (is_number(v)) {
        return v === 0 ? "0" : v < 0 ? "-" + __stringify_number(-v) : __stringify_number(v);
    } else if (is_string(v)) {
        return v;
    } else if (is_undefined(v)) {
        return "undefined";
    } else if (is_function(v)) {
        return "function";
    } else {
        return "";
    }
}